// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0--rc3
// source: bominion.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BominionClient is the client API for Bominion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BominionClient interface {
	// 購入する
	Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*BuyResponse, error)
	// 捨てる
	Discard(ctx context.Context, in *DiscardRequest, opts ...grpc.CallOption) (*DiscardResponse, error)
	// 発動する
	Activate(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*ActivateResponse, error)
	// 発動する
	GetPhase(ctx context.Context, in *GetPhaseRequest, opts ...grpc.CallOption) (*GetPhaseResponse, error)
}

type bominionClient struct {
	cc grpc.ClientConnInterface
}

func NewBominionClient(cc grpc.ClientConnInterface) BominionClient {
	return &bominionClient{cc}
}

func (c *bominionClient) Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*BuyResponse, error) {
	out := new(BuyResponse)
	err := c.cc.Invoke(ctx, "/bominion.Bominion/Buy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bominionClient) Discard(ctx context.Context, in *DiscardRequest, opts ...grpc.CallOption) (*DiscardResponse, error) {
	out := new(DiscardResponse)
	err := c.cc.Invoke(ctx, "/bominion.Bominion/Discard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bominionClient) Activate(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*ActivateResponse, error) {
	out := new(ActivateResponse)
	err := c.cc.Invoke(ctx, "/bominion.Bominion/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bominionClient) GetPhase(ctx context.Context, in *GetPhaseRequest, opts ...grpc.CallOption) (*GetPhaseResponse, error) {
	out := new(GetPhaseResponse)
	err := c.cc.Invoke(ctx, "/bominion.Bominion/GetPhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BominionServer is the server API for Bominion service.
// All implementations must embed UnimplementedBominionServer
// for forward compatibility
type BominionServer interface {
	// 購入する
	Buy(context.Context, *BuyRequest) (*BuyResponse, error)
	// 捨てる
	Discard(context.Context, *DiscardRequest) (*DiscardResponse, error)
	// 発動する
	Activate(context.Context, *ActivateRequest) (*ActivateResponse, error)
	// 発動する
	GetPhase(context.Context, *GetPhaseRequest) (*GetPhaseResponse, error)
	mustEmbedUnimplementedBominionServer()
}

// UnimplementedBominionServer must be embedded to have forward compatible implementations.
type UnimplementedBominionServer struct {
}

func (UnimplementedBominionServer) Buy(context.Context, *BuyRequest) (*BuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}
func (UnimplementedBominionServer) Discard(context.Context, *DiscardRequest) (*DiscardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discard not implemented")
}
func (UnimplementedBominionServer) Activate(context.Context, *ActivateRequest) (*ActivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedBominionServer) GetPhase(context.Context, *GetPhaseRequest) (*GetPhaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhase not implemented")
}
func (UnimplementedBominionServer) mustEmbedUnimplementedBominionServer() {}

// UnsafeBominionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BominionServer will
// result in compilation errors.
type UnsafeBominionServer interface {
	mustEmbedUnimplementedBominionServer()
}

func RegisterBominionServer(s grpc.ServiceRegistrar, srv BominionServer) {
	s.RegisterService(&Bominion_ServiceDesc, srv)
}

func _Bominion_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BominionServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bominion.Bominion/Buy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BominionServer).Buy(ctx, req.(*BuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bominion_Discard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BominionServer).Discard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bominion.Bominion/Discard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BominionServer).Discard(ctx, req.(*DiscardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bominion_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BominionServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bominion.Bominion/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BominionServer).Activate(ctx, req.(*ActivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bominion_GetPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BominionServer).GetPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bominion.Bominion/GetPhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BominionServer).GetPhase(ctx, req.(*GetPhaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bominion_ServiceDesc is the grpc.ServiceDesc for Bominion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bominion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bominion.Bominion",
	HandlerType: (*BominionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Buy",
			Handler:    _Bominion_Buy_Handler,
		},
		{
			MethodName: "Discard",
			Handler:    _Bominion_Discard_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _Bominion_Activate_Handler,
		},
		{
			MethodName: "GetPhase",
			Handler:    _Bominion_GetPhase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bominion.proto",
}
